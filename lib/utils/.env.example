# Fill out the key values with your values
# and then save the file as `.env`

# All of these values are plausible and valid keys.
# NOTE: The values SHOULD NEVER be used in the real application
# For New Keys - you can use `deno run ./utils/keys/gen-all.ts` for new values

# AIRTABLE CREDENTIALS
AIRTABLE_KEY=EXAMPLE_VALUE-1
AIRTABLE_BASE=EXAMPLE_VALUE-2
AIRTABLE_TABLE=EXAMPLE_VALUE-3

# AWS CREDENTIALS
AWS_KEY='AKEYTHATYOUSHOULDNEVERSHARE'
AWS_SECRET='QUtFWVRIQVRZT1VTSE9VTERORVZFUlNIQVJFCg'
AWS_REGION=EXAMPLE_VALUE-6

# AWS DYNAMODB TABLES
AWS_DYN_TABLE_SESSION=EXAMPLE_VALUE-7
AWS_DYN_TABLE_MEGA=EXAMPLE_VALUE-8

# AWS POLY CLIENT
AWS_POLLY_BUCKET='BUCKETNAME'
AWS_POLLY_PREFIX=`PREFIX_STRING`

# ECDSA KEY
#
# Generate new key via the following 
# ```typescript
# export const signVerifyKeypair = await crypto.subtle.generateKey(
#   { name: "ECDSA", namedCurve: "P-384" },
#   true,
#   ["sign", "verify"],
# ) as CryptoKeyPair;
# ```
JWT_KEY_ID=1681440780685
JWT_KEY_KTY=EC
JWT_KEY_CRV=P-384
JWT_KEY_ALG=ES384
JWT_KEY_X="qgtlJ5Mjfl9mUGwe2-xmBXuqe4AD8S3eRnx9zvA57sIXNVyqvKRVovBfggHp-Fzf"
JWT_KEY_Y="fJktg04e2aqSFft6lg-V0Y4H5ZFpKwpyxslNHjisYeTZGS_19HKXf5PCA7dfJP3z"
JWT_KEY_D_PRIVATE="eUL7TuVkrf3Cn4shi3HT2Rb1cXs0gscbgJzQCv613B7xZ184bYANzQB30iH7PxlG"
JWT_KEY_OPS_PRIVATE=sign
JWT_KEY_OPS_PUBLIC=verify
JWT_KEY_EXT=true


# AES GCM KEY
#
# Generate new key via the following
# ``` typescript`
# export const aesSecret = await window.crypto.subtle.generateKey(
#   {
#     name: "AES-GCM",
#     length: 256
#   },
#   true,
#   ["encrypt", "decrypt"]
# ) as CryptoKey;
# ```
AES_GCM_K="CsCL_RVimsnYKChn5c_tiQN0zJ_L54EKbp0GGh4EZ_Q",

# RSA KEY
# some of these values contain double dash (which is interpreted as a comment)
# so, since you cant easily see the whole value (horizontal scrol) 
# just wrap in quotes to be safe
#
# Generate new key via the following
# ```typescript
# export const keyPairRSA = await crypto.subtle.generateKey(
#     {
#       name: "RSA-OAEP",
#       modulusLength: 4096,
#       publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
#       hash: { name: "SHA-256" },
#     } as RsaHashedImportParams,
#     true,
#     ["encrypt", "decrypt"]
# ) as CryptoKeyPair;
# ```
#
RSA_KEY_E=AQAB
RSA_KEY_N="1uhQtYt5dGFLg-fMimgLX4c5AiLyBV-ywllgPgX0iydvQw8d3XZg5bjTcMsMsON0ssnarPTKMA2vqjuLZlfB3oe_i9ZxDSQLMRVfpFZQHW_bWmIu0j0pvXVogrKxS93gV6WiigIKCxlq9DRlE3ARzYoHzlvLbwcDQGq1zrnY31HLPFT-k3qmCJkgvag-JkL_fqc2mTRQaC5qDst9CYJnQQX8Ch5zjzQrFhzmWJFq2oNx6LGFWxPUvXDTS4t8tYm0e9GL9G4tPrxSzB5dj-GCRHtB7WeEJn2FJN2VkZulYjOqB2A-Fjm9eN1bM4Xt8CkmCuzEiC0Wkbc9riIAAiDGyX9mWJ26gyZO8EwQjhBn8yVeMZiuaqXG5wjO4Ym5tompboaAuf2oiK79uLCEW1kqvA7-HIqzpGhpcmTKScin5vh2W0BPinmRvt3n1ebW_c_h3ZXhxJ51CqXGplW5cHASoZ3FxfQ9uY-a-muAqhM8fjDGYmefzst61XKDf3sdCqr5U_jxVb4JnAx00IgqRQDJ49VNYDFrIiYDeBSbEaOeRjDrSi4XeWghTubrrhmiQRy4uj9Zl5jFQhMAi1jAxx3NW9kZBufL1-K6QfEPlw2A9le2Jj7jKzUV5FjasPJhmFqmV-8BwK9vMtoZzoTzpdXAK4n5zJvL940QaA3M1yeYDuE"
RSA_KEY_PRIVATE_D="PyMlgxCk8BIdk3UoXIlQvhIGJ6CIpheFdx-27MHnJHLDd1oblhLPSO5SAFNHOTi58kTnX-TS-ecrcsHnpHun027iUX0A3bF3MEZtQOSyyNMyCI3L36xkdOrnd250NCvNWzKoXA9ZUAV5rKEwCNPmBxLEVFYXoFjZFbXEECX9ly56nREDceSYnvIN8mpZR_hrA5Swr7X04YaxVgNmisKq_yl48KgdnzbeabK34dFnKSdw8cIlwapD2Bwrl4g1bUg1pCLeEUPFOycs1BcfucOw99mWdt7wrjY2Raxr4sltfzpae6xE0VbJWZb-0lZIn0QXjyIcYz2L4eeJ0Xzfr8BdZg87PXa4f0u_2JAtzs_1G2VO0AhsaPleObdPABxtM5wF4OfE3vPAWfJkZxZtxtRLY2GvkB7IgQzqF9Y51kUqWPOyBd1ExqrnqLieB92PdT2hmD3Dg68JlRf-sOFOb24BC2GSAhBl0vmdRdl5s7y1ZTS8waCCvKpKeSi0k-SZnTbmhOkPtNfVjX5qgvx3R5p2wIYXSCHvwE9aw7T2SAudfNQUYmgPJ-2c8TaCHzeGXKBW9hOFo9TvCEmnGctQ_bLNbtUjw8bQ8JiTYcZkGEAVuwKJGyJ9O7UZci8cM9M77xoX-3tIfwEFnvBKhQTOqXPiAQFgriENv2g80ePxEEp6xIE"
RSA_KEY_PRIVATE_P="_IjVrA2tzUvuj_eF-FuV6P71ILmvjCmrkqFLEJAmmfISwND4DIXxzbsFwaT5-s1w9VJO8vefqq0GiuauQOPNM2yZVlM08cT0kvF-1i8DhUVC6IiWO68D_CbGjTH-nflDqf3F8Jkrxic3u2g71cCadTy1mh_4m9cpjGnm9x1_ToEUqdnzzRzm6JbzIwTMWTEdz_nXybUqt07pyR9QQtVSq0ECWAJ4umgI3yZpwAEC0ACsfW_1W2gLw6EKHxoYCqkItANeulifDhF5_N2Vv3cX5W_U5bDmVgB-AW-6dKfMKbaUsPAgim7Xs_8f_rKflU3FGkt7pazJ42vi1EGJmkcw6Q"
RSA_KEY_PRIVATE_Q="2dtLjb5N1Qw0EqY_dhrWuoVngR_RVXTgw0_EHNFiE2H8eLuOBryqrlUbggVBzZhpUiqRtAUYX6pULhwioV2j_mJC10Go9BPm4Bsp1nSePhNrHODBAZA6miahUawogEUDL58AD-Bk18grlTeNuDC9-Gg3s6x-0W-PB-2odIBwC2UGHYrfU_KRFPmieykxeLy2bT_8HeSvaC0OXW7fG_HeyUWtVOC_8ZnpJvjApS7X1PRimxDP6rtN97v_qf3JDsrZFJ3EwY6sMVUQr4luP9a326ggh_dx94GVxiQpsB7ebs0sGp9G1C4spAzxYqbXXO8aryjwHgmvngurKUipHSnzOQ"
RSA_KEY_PRIVATE_DP="ce1RaCNrq1h8MZrbZ6X5xXlwIOlkVvldm_MEKF6_62eYKkCcBxpOch_Tgv7of8s7EJGnaFlqQNd6QiO7rS6YHoD51EYJdqECLWChdgMTtYX_n2QvUpGsXI8pt_07_wy7B--i4t5XLzf2Hqfxhoczp3xR-Uw_Hh89cUk9l3JJQqNdLRtUr85AJeIjokLB5eMQrgjq3ubKdJQ3SDLGRMB0YSoc4pOK352bkwCDaMmL-Ua0iop9yFTyKbl3FXzyJ60Gbh-vFqZwaypbPEbDDfOuZiXDiDP8VgQ21HMRTRt-Mbta7VAHfixvR5brWj4_XF4Pc8Nl7uI62kyLsnI2n9FKMQ"
RSA_KEY_PRIVATE_DQ="KQpQz2D8VJg57xF2fw9LSFP9TavqyYh9Fw4dybgAG9qnry7V8Jr2JGVQC0xmOw7tOFdgn2MeVldGCHGwbGmxjSiBov9xjpl5MtqrJQVPEi6iTQxiD6NWBtgkJ7ig4Jkfoob3ggYpuSSyYSfYAMzd3L_1Tlm-gkHb1giFZX0UnnDnmAUjUTMu9Z6ZZ045TZ9vVmFpY1BDYwKp5BwQ17jW2V_Q6V51ilQOQhM2Z2fNrQZk1QVzxaqHY5X88c8nYyv_fQzDlhsEgT6fKBJhvJD8jdq8ViDdTV0SFAOX_t-x03m_RzyeITaZnkX56zW2-IDqq_iwU1hLxyA3nE1d3mqasQ"
RSA_KEY_PRIVATE_QI="2uQCY16JeC8gkrP9NGKq8SyemUHDrTyPHyjUaN9cws5wfK1229VJWvDPnSTRUUv2g99SDuSPqXVkGOtOnSloksYziqbojNxBzcirZM1xJPUgGbePR9wOnq-9jeiRmYY8ZywYGCh-H9zGmXiI7Vqvu36q8apQe9bN0LQaGInTGYwJW8bBNs0mHYKJpEXa3nsuEALxEbk5MiTNs_U7ls9dimFsmb0ZIpmLrm-pbrUHiUWBfKdWC-8PMSp-4yFPF9tKQtjDagfixed3Zmhy0ErL_FcI5jO3vJ6U6DWWiM8OWLyCJ2SC-Wu-U5ey2cM13TEvH7_5PLbtJfe8Uc-36hsq8A"
